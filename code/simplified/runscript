import numpy as np
import openmdao.api as om
import dymos as dm
from dynamics import system
import matplotlib.pyplot as plt
from dymos.examples.plotting import plot_results

def main():
    duration = 10

    l = 2
    m = 2

    states_init = {'x1': -(np.pi)/2, 'x2': 0, }
    states_final = {'x1': np.pi, 'x2':0}

    p = om.Problem()

    p.driver = om.pyOptSparseDriver()
    p.driver.options['optimizer'] = 'IPOPT'
    p.driver.options['print_results'] = False
    p.driver.declare_coloring(tol=1.0E-12, orders=None)

    traj = p.model.add_subsystem('traj', dm.Trajectory())

    threelink = traj.add_phase('threelink', dm.Phase(ode_class=system, transcription=dm.GaussLobatto(num_segments=100, order=3), ode_init_kwargs={'states_ref': states_final}))

    threelink.set_time_options(fix_initial=True, fix_duration=True, duration_val=duration, duration_ref=duration, units='s')

    threelink.add_parameter('l', val=l, units='m', static_target=True)
    threelink.add_parameter('m', val=m, units='kg', static_target=True)

    threelink.add_state('x1', fix_initial=True, rate_source='x1_dot', units='rad')
    threelink.add_state('x2', fix_initial=True, rate_source='x2_dot', units='rad/s')
    threelink.add_state('cost', fix_initial=True, rate_source='costrate')

    threelink.add_control('tau', fix_initial=False, upper=5, lower=0, units='N*m')

    threelink.add_boundary_constraint('x1', loc='initial', equals=states_init['x1'], units='rad')
    threelink.add_boundary_constraint('x2', loc='initial', equals=states_init['x2'], units='rad/s')

    threelink.add_boundary_constraint('x1', loc='final', equals=states_final['x1'], units='rad')
    threelink.add_boundary_constraint('x2', loc='final', equals=states_final['x2'], units='rad/s')

    threelink.add_objective('cost')#, loc='final')

    p.setup(check=True)

    p.set_val('traj.threelink.states:x1', threelink.interp(ys=[states_init['x1'], states_final['x1']], nodes='state_input'), units='rad')
    p.set_val('traj.threelink.states:x2', threelink.interp(ys=[states_init['x2'], states_final['x2']], nodes='state_input'), units='rad/s')
    p.set_val('traj.threelink.states:cost', threelink.interp(xs=[0, 10, duration], ys=[0, 50, 100], nodes='state_input'))
    p.set_val('traj.threelink.controls:tau', threelink.interp(ys=[0, 10], nodes='control_input'), units='N*m')
    
    dm.run_problem(p, run_driver=True, simulate=True, simulate_kwargs={'method' : 'Radau', 'times_per_seg' : 10}, make_plots=True)

    cost = p.get_val('traj.threelink.states:cost')[-1]
    print('cost: ', cost)

    sim_sol = om.CaseReader('dymos_simulation.db').get_case('final')

    plot_results([('traj.threelink.timeseries.time','traj.threelink.timeseries.states:x1','time', 'x1'),
                  ('traj.threelink.timeseries.time','traj.threelink.timeseries.states:x2','time','x2'),
                  ('traj.threelink.timeseries.time','traj.threelink.timeseries.controls:tau','time','tau'),
                  ('traj.threelink.timeseries.time', 'traj.threelink.timeseries.states:cost', 'time', 'cost')],
                  title='Time History',p_sol=p,p_sim=sim_sol)
    plt.savefig('simplified.pdf', bbox_inches='tight')



if __name__ == '__main__':
    main()




